/**
Recursive Shape Generator for Fractal Penrose Tiles
<h1>Level of Recursive Generation</h1>
You can control the shapes perimeter with the Level of Recursive Generation slider.
<h2>Recursive Level 0</h2>
Level 0 is equivalent to the Penrose Rhombus Tiles...
@module bZEsZoFg95i
**/

// -------------------------------------------
// Added Automatically During Library Upgrade.
// Convenience Declarations For Dependencies.
// 'Core' Is Configured In Libraries Section.
// -------------------------------------------
var Debug = Core.Debug;
var Mesh3D = Core.Mesh3D;
var Path2D = Core.Path2D;
var Plugin = Core.Plugin;
var Tess = Core.Tess;
var Solid = Core.Solid;

// -------------------------------------------
// Fractal Penrose Tile Generator Script:
// -------------------------------------------
params = [
	{ "id": "level", "displayName": "Recursive Level", "type": "int", "rangeMin": 0, "rangeMax": 14, "default": 2 },
	{ "id": "tile", "displayName": "Tile Type", "type": "list", "listLabels": ["Wide Rhombus", "Narrow Rhombus"], "listValues": ["w", "n"], "default": "w" },
	{ "id": "size", "displayName": "Size", "type": "length", "rangeMin": 1, "rangeMax": 40, "default": 20 },
	{ "id": "invert", "displayName": "Invert Terrain", "type": "bool", "default": false },
	{ "id": "flat_bottom", "displayName": "Flat Bottom", "type": "bool", "default": true },
	{ "id": "vertical_scale", "displayName": "Vertical Scale", "type": "float", "rangeMin": -2, "rangeMax": 2, "default": 1 },
	{ "id": "base", "displayName": "Base Height", "type": "float", "rangeMin": -20, "rangeMax": 20, "default": 2 }
];

function intersection(line1, line2) {
// two lines
// y = a1 + b1x, y = a2 + b2x
// intersect at
// xi = - (a1 - a2) / (b1 - b2), yi = a1 + b1xi
}

function toRad(degrees) { return degrees * 0.0174532925; }

// yurt is a turtle graphics style vector lib
var yurt = {
  x:0,
  y:0,
  z:1,
  heading:0,
  fd: function (d) {
      this.x = this.x + d * Math.cos(toRad(this.heading));
      this.y = this.y + d * Math.sin(toRad(this.heading));
    },
  rt: function (t) {this.heading += t;},
  lt: function (t) {this.heading -= t;},
  rise: function (h) {this.z += h;},
	level: function (l) {this.z = l;}
};

var shape = {top:[], side:[], side_skip:[], bottom:[]};
var base = 2;
var invert = false;
var flat_bottom = true;
var Phi = 1.618033989, phi = 0.618033989;

// the narrow tile
// s->scale, vs->vertical scale, mesh->3d drawing context, vl->vertical level
function n (s, vs, vl) {
  var top_pts = [];
  var bot_pts = [];
  var vtilt = (vl === 1)? -1.0: 1.0;
	vl = (vl === 1)? 3: 0;
	if (invert) {
		vtilt = vtilt * -1;
		vl = (vl === 3)? 0: 3;
	}

	yurt.level(base + vl*vs*s);
  top_pts.push([yurt.x, yurt.y, yurt.z]);
  if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.rt(2 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(4 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(1 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*-1*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(4 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*-1*s);

  yurt.lt(1 * 36);
  yurt.lt(2 * 36);

	//top surface
  shape.top.push([top_pts[3], top_pts[2], top_pts[1], top_pts[0]]);
  // sides
  shape.side.push([top_pts[0], top_pts[1], bot_pts[1], bot_pts[0]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[1], top_pts[2], bot_pts[2], bot_pts[1]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[2], top_pts[3], bot_pts[3], bot_pts[2]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[3], top_pts[0], bot_pts[0], bot_pts[3]]);
	shape.side_skip.push(false);
	//bottom surface
	shape.bottom.push([bot_pts[0], bot_pts[1], bot_pts[2], bot_pts[3]]);
}

// wide tile
function w (s, vs, vl) {
  var top_pts = [];
  var bot_pts = [];
	var vtilt = (vl === 1)? 1: -1;
	if (invert) {
		vtilt = vtilt * -1;
		vl = (vl === 1)? 2: 1;
	}

	yurt.level(base + vl*vs*s);
  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.rt(1 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(2 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(3 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*-1*s);

  top_pts.push([yurt.x, yurt.y, yurt.z]);
	if (flat_bottom) {
		bot_pts.push([yurt.x, yurt.y, 0]);
	}
	else {
		bot_pts.push([yurt.x, yurt.y, yurt.z-s*vtilt]);
	}

  yurt.lt(2 * 36);
  yurt.fd(s);
  yurt.rise(vs*vtilt*-1*s);


  yurt.lt(3 * 36);
  yurt.lt(1 * 36);

  //top surface
  shape.top.push([top_pts[3], top_pts[2], top_pts[1], top_pts[0]]);
  // sides
  shape.side.push([top_pts[0], top_pts[1], bot_pts[1], bot_pts[0]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[1], top_pts[2], bot_pts[2], bot_pts[1]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[2], top_pts[3], bot_pts[3], bot_pts[2]]);
	shape.side_skip.push(false);
  shape.side.push([top_pts[3], top_pts[0], bot_pts[0], bot_pts[3]]);
	shape.side_skip.push(false);
	//bottom surface
	shape.bottom.push([bot_pts[0], bot_pts[1], bot_pts[2], bot_pts[3]]);

}

// s->scale, k->kind[wide, narrow], depth->recursive depth,
// h->height-scale-factor, mesh->3d drawing context, v-vertical level
function gen (s, k, depth, h, v) {
  //'use strict';
  var scale, dep, new_v;
  if (depth < 1) {
    if (k === 'w') {
      w(s, h, v);
    }
		else {
			n(s, h, v);
		}
  }
  else {
    dep = depth - 1;
    scale = s * phi;

    if (k === 'n') {
      // generate a narrow and wide
      // first the narrow tile
      yurt.fd(scale);
      yurt.rt(3 * 36);
			new_v = (v === 1)? 1: 2;
      gen(scale, 'n', dep, h, new_v);

      yurt.lt(2 * 36);
      yurt.fd(scale);
      yurt.rt(3 * 36);

			new_v = (v === 2)? 1: 2;
      gen(scale, 'w', dep, h, new_v);

      yurt.rt(1 * 36);
      yurt.fd(scale);
      yurt.rt(1 * 36);
      yurt.fd(scale);

      yurt.rt(4 * 36);
	  }
	  if (k === 'w') {
	    // w -> w n w
	    // first generate w
	    yurt.rt(2 * 36);
	    yurt.fd(s);
	    yurt.rt(5 * 36);

			new_v = (v === 1)? 1: 2;
	    gen(scale, 'w', dep, h, new_v);

	    yurt.rt(2 * 36);
	    yurt.fd(scale);
	    yurt.lt(3 * 36);

			new_v = (v === 2)? 1: 2;
	    gen(scale, 'n', dep, h, new_v);

	    // lastly another w

	    yurt.rt(2 * 36);
	    yurt.fd(scale);
	    yurt.rt(2 * 36);
	    yurt.fd(scale);
	    yurt.rt(4 * 36);

			new_v = (v === 2)? 1: 2;
	    gen(scale, 'w', dep, h, new_v);

	    yurt.rt(1 * 36);
	    yurt.fd(s * Phi);
	    yurt.lt(5 * 36);
	  }
	}
}

function dedup() {
	var i, j;
	var line_a, line_b;
	var tolerance = distance(shape.side[0][0], shape.side[0][1])*0.05;
	for(i = 0; i < shape.side.length; i += 1) {
		line_a = shape.side[i];
		for(j = 0; j < shape.side.length; j += 1) {
			if (i !== j && !shape.side_skip[i]) {
				line_b = shape.side[j];
				if (line_eq(line_a, line_b, tolerance)){
					shape.side_skip[i] = true;
				}
			}
		}
	}
}
function line_eq(a, b, tol) {
	return ((pt_eq(a[0], b[0], tol) &&
					 pt_eq(a[1], b[1], tol)) ||
					(pt_eq(a[0], b[1], tol) &&
					 pt_eq(a[1], b[0], tol))
				 );
}
function pt_eq(a, b, tol) { // the z axis has been omitted
	return (a[0]-tol < b[0] &&
					a[0]+tol > b[0] &&
					a[1]-tol < b[1] &&
					a[1]+tol > b[1] );
}

function distance(pt_a, pt_b) {
	var dx = pt_b[0] - pt_a[0], dy = pt_b[1] - pt_a[1];
	return Math.sqrt(dx*dx + dy*dy);
}

function produce_mesh (mesh) {
  //top surface
	shape.top.forEach(function(pts) {
		mesh.quad(pts[0], pts[1], pts[2], pts[3]);
	});
  // sides
	//top surface
	shape.side.forEach(function(pts, i) {
		if (!shape.side_skip[i]) {
			mesh.quad(pts[0], pts[1], pts[2], pts[3]);
		}
	});
  // bottom
	shape.bottom.forEach(function(pts) {
		mesh.quad(pts[0], pts[1], pts[2], pts[3]);
	});
}

function process(params) {

	var level = params['level'] || 0;
	var tile = params['tile'] || 'w';
	var size = params["size"] || 1;
	// calc the natural height of the Penrose tile (the Morse Elevation)
	var term1 = Math.cos(toRad(54));
	var term2 = Math.cos(toRad(36));
	var me = 0.5 * Math.sqrt(4*(Phi*Phi*term1*term1 - term2*term2));
	var vertical_scale = params["vertical_scale"] || 1.0;
	vertical_scale = vertical_scale * me;
	base = params["base"] || 1;
	invert = params["invert"] || false;
	flat_bottom = params["flat_bottom"];

	var mesh = new Mesh3D();
	var starting_tilt = true;
	var starting_z = 0;
	var starting_vLevel = (tile === 'w')? 1: 2;

  gen(size, tile, level, vertical_scale, starting_vLevel);
  dedup();
  produce_mesh(mesh);

	return Solid.make(mesh);
}
// -------------------------------------------
// Added Automatically During Library Upgrade.
// Original Shape Color. Changing Effects The
// Default Color In All Documents Where Used.
// -------------------------------------------
presets = [
  { 'color': [200, 160, 220] }
];
