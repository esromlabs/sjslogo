// -------------------------------------------
// Added Automatically During Library Upgrade.
// Convenience Declarations For Dependencies.
// 'Core' Is Configured In Libraries Section.
// -------------------------------------------
var Debug = Core.Debug;
var Mesh3D = Core.Mesh3D;
var Path2D = Core.Path2D;
var Plugin = Core.Plugin;
var Tess = Core.Tess;
var Solid = Core.Solid;

// -------------------------------------------
// Fractal Penrose Tile Generator Script:
// -------------------------------------------
params = [
	{ "id": "level", "displayName": "recursive level", "type": "int", "rangeMin": 0, "rangeMax": 16, "default": 2 },
	{ "id": "tile", "displayName": "Tile type", "type": "list", "listLabels": ["Wide Rhombus", "Narrow Rhombus"], "listValues": ["w", "t"], "default": "w" },
	{ "id": "size", "displayName": "Size", "type": "length", "rangeMin": 10, "rangeMax": 50, "default": 20 },
	{ "id": "vertical_scale", "displayName": "Vertical Scale", "type": "length", "rangeMin": 0.1, "rangeMax": 10, "default": 1.2 }
];

function toRad(degrees) { return degrees * 0.0174532925; }

// yurt is a turtle graphics style vector lib
var yurt = {
  x:0,
  y:0,
  z:1,
  heading:0,
  fd: function (d) {
      this.x = this.x + d * Math.cos(toRad(this.heading));
      this.y = this.y + d * Math.sin(toRad(this.heading));
    },
  rt: function (t) {this.heading += t;},
  lt: function (t) {this.heading -= t;},
  rise: function (h) {this.z += h;},
	level: function (l) {this.z = l;}
};

// the narrow tile
// s->scale, h->height scaling, mesh->3d drawing context, l->level
function t (s, h, mesh, l) {
  var top_pts = [];
  var bot_pts = [];
  var vtilt = (l === 1)? 1: -1;

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.rt(2 * 36);
  yurt.fd(s);
	yurt.level(l*h);
  yurt.rise(h*vtilt);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(4 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(1 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt*-1);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(4 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt*-1);

  yurt.lt(1 * 36);
  yurt.lt(2 * 36);

  //top surface
  mesh.quad(top_pts[0], top_pts[1], top_pts[2], top_pts[3]);
  // sides
  mesh.quad(top_pts[0], top_pts[1], bot_pts[1], bot_pts[0]);
  mesh.quad(top_pts[1], top_pts[2], bot_pts[2], bot_pts[1]);
  mesh.quad(top_pts[2], top_pts[3], bot_pts[3], bot_pts[2]);
  mesh.quad(top_pts[3], top_pts[0], bot_pts[0], bot_pts[3]);
  // bottom
  mesh.quad(bot_pts[0], bot_pts[1], bot_pts[2], bot_pts[3]);

}

function w (s, h, mesh, l) {
  var top_pts = [];
  var bot_pts = [];
	var vtilt = (l === 1)? 1: -1;

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.rt(1 * 36);
  yurt.fd(s);
	yurt.level(l*h);
  yurt.rise(h*vtilt);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(2 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(3 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt*-1);

  top_pts.push([yurt.x, yurt.y, Math.abs(yurt.z + vlevel*vtilt)]);
  bot_pts.push([yurt.x, yurt.y, 0]);

  yurt.lt(2 * 36);
  yurt.fd(s);
  yurt.rise(h*vtilt*-1);


  yurt.lt(3 * 36);
  yurt.lt(1 * 36);

  //top surface
  mesh.quad(top_pts[0], top_pts[1], top_pts[2], top_pts[3]);
  // sides
  mesh.quad(top_pts[0], top_pts[1], bot_pts[1], bot_pts[0]);
  mesh.quad(top_pts[1], top_pts[2], bot_pts[2], bot_pts[1]);
  mesh.quad(top_pts[2], top_pts[3], bot_pts[3], bot_pts[2]);
  mesh.quad(top_pts[3], top_pts[0], bot_pts[0], bot_pts[3]);
  // bottom
  mesh.quad(bot_pts[0], bot_pts[1], bot_pts[2], bot_pts[3]);
}

// s->scale, k->kind[wide, narrow], depth->recursive depth,
// h->height-scale-factor, mesh->3d drawing context, v-vertical level
function gen (s, k, depth, h, mesh, v) {
  //'use strict';
  var scale;
  if (depth < 1) {
    //setcolor :depth
    if (k === 't') {
      t(s, h, mesh, v);
    }
    if (k === 'w') {
      w(s, h, mesh, v);
    }
  }
  else {
    dep = depth -1;
    scale = s * 0.618034;

    if (k === 't') {
      // generate a t and w
      // first the t
      yurt.fd(scale);
      yurt.rt(3 * 36);

      gen(scale, 't', dep, h, mesh, 1);

      yurt.lt(2 * 36);
      yurt.fd(scale);
      yurt.rt(3 * 36);

      gen(scale, 'w', dep, h, mesh, 2);

      yurt.rt(1 * 36);
      yurt.fd(scale);
      yurt.rt(1 * 36);
      yurt.fd(scale);

      yurt.rt(4 * 36);
  }
    if (k === 'w') {
      // w -> w t w
      // first generate w
      yurt.rt(2 * 36);
      yurt.fd(s);
      yurt.rt(5 * 36);

      gen(scale, 'w', dep, -h, mesh, 2);

      yurt.rt(2 * 36);
      yurt.fd(scale);
      yurt.lt(3 * 36);

      gen(scale, 't', dep, -h, mesh, 1);

      // lastly another w

      yurt.rt(2 * 36);
      yurt.fd(scale);
      yurt.rt(2 * 36);
      yurt.fd(scale);
      yurt.rt(4 * 36);

      gen(scale, 'w', dep, h, mesh, 1);

      yurt.rt(1 * 36);
      yurt.fd(s * 1.618034);
      yurt.lt(5 * 36);
    }
  }
}

function process(params) {

	var level = params['level'] || 2;
	var tile = params['tile'] || 'w';
	var size = params["size"] || 4;
	var vertical_scale = params["vertical_scale"] || 1;

	var mesh = new Mesh3D();
	var starting_tilt = true;
	var starting_z = 0;

  gen(size, tile, level, vertical_scale, mesh, starting_z, true);

	return Solid.make(mesh);
}
// -------------------------------------------
// Added Automatically During Library Upgrade.
// Original Shape Color. Changing Effects The
// Default Color In All Documents Where Used.
// -------------------------------------------
presets = [
  { 'color': [250, 110, 7] }
];
